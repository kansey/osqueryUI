'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.REDUX_DEVTOOLS = exports.VUEJS_DEVTOOLS = exports.ANGULARJS_BATARANG = exports.JQUERY_DEBUGGER = exports.BACKBONE_DEBUGGER = exports.REACT_DEVELOPER_TOOLS = exports.EMBER_INSPECTOR = undefined;

var _electron = require('electron');

var _electron2 = _interopRequireDefault(_electron);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _downloadChromeExtension = require('./downloadChromeExtension');

var _downloadChromeExtension2 = _interopRequireDefault(_downloadChromeExtension);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var IDMap = {};
var IDMapPath = _path2.default.resolve((0, _utils.getPath)(), 'IDMap.json');
if (_fs2.default.existsSync(IDMapPath)) {
  IDMap = JSON.parse(_fs2.default.readFileSync(IDMapPath, 'utf8'));
}

exports.default = function (chromeStoreID) {
  var forceDownload = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  if (!forceDownload && IDMap[chromeStoreID] && (_electron.remote || _electron2.default).BrowserWindow.getDevToolsExtensions && (_electron.remote || _electron2.default).BrowserWindow.getDevToolsExtensions().hasOwnProperty(IDMap[chromeStoreID])) {
    return Promise.resolve(IDMap[chromeStoreID]);
  }
  return (0, _downloadChromeExtension2.default)(chromeStoreID, forceDownload).then(function (extensionFolder) {
    var name = (_electron.remote || _electron2.default).BrowserWindow.addDevToolsExtension(extensionFolder); // eslint-disable-line
    _fs2.default.writeFileSync(IDMapPath, JSON.stringify(Object.assign(IDMap, _defineProperty({}, chromeStoreID, name))));
    return Promise.resolve(name);
  });
};

var EMBER_INSPECTOR = exports.EMBER_INSPECTOR = 'bmdblncegkenkacieihfhpjfppoconhi';
var REACT_DEVELOPER_TOOLS = exports.REACT_DEVELOPER_TOOLS = 'fmkadmapgofadopljbjfkapdkoienihi';
var BACKBONE_DEBUGGER = exports.BACKBONE_DEBUGGER = 'bhljhndlimiafopmmhjlgfpnnchjjbhd';
var JQUERY_DEBUGGER = exports.JQUERY_DEBUGGER = 'dbhhnnnpaeobfddmlalhnehgclcmjimi';
var ANGULARJS_BATARANG = exports.ANGULARJS_BATARANG = 'ighdmehidhipcmcojjgiloacoafjmpfk';
var VUEJS_DEVTOOLS = exports.VUEJS_DEVTOOLS = 'nhdogjmejiglipccpnnnanhbledajbpd';
var REDUX_DEVTOOLS = exports.REDUX_DEVTOOLS = 'lmhkpmbekcpmknklioeibfkpmmfibljd';